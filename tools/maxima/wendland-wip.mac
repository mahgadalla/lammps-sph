/* returns a wendland polynom */
load("pw.mac");
load("romberg");
load("wendland.mac");

ndim: 2;
load("sph-kernel.mac");
kill(wl, dwl, w);
M: 2;

ratprint: false;
keepfloat: true;
wraw: buildq([g: laguerre(ndim/2, M)(eps^2*'r^2)*wendland(ndim, 2)('r)], lambda([r], g));
eq: getkernmom(wraw, ndim, 2, 1);
ro: sort(sublist(map('rhs, allroots(float(eq))), lambda([q], q>0)));

w1: subst(subst(ro[1], eps, wraw('r)), body, lambda(['r], body));
w2: subst(subst(ro[2], eps, wraw('r)), body, lambda(['r], body));

wbn: lambda([r], plusfun(1-'r)^4*(1+4*'r-15*'r^2));
w: normkern(wbn, ndim, 1);
w1: normkern(w1, ndim, 1);

f: Fn(w, ndim, romberg, 1);
f1: Fn(w1, ndim, romberg, 1);

sig2: 1/ndim*getkernmom(w, ndim, 2, 1);
h: max(abs(2*sqrt(sig2)), 1/2);

/*
kill(wb);
wb[n](k):= 3*(n/k)^(n+2)*(sin(k/n))^n*(1-(k/n)*cot(k/n));
wbfl: map(lambda([q], wb[4](2*%pi*q)), tl);
*/

/*
plot2d(
  [
      [parametric, %pi*h*t, f(t)],
      [parametric, %pi*h*t, f1(t)]
  ],
  ['nticks, 500],
  ['t, 1e-5, 6], 
  ['logy], ['y, 1e-6, 1.1], ['x, 0, 3*%pi]);
*/

load("dump2maxima.mac");
finput: "../../examples/USER/sdpd/diff/c1.44e+02-ndim2-eta8.0-sdpd_background0.0-nx30-n5.00e+00-ktypelaguerrewendland4/dump00040000.dat";
[lmp_data, atom_data]: dump2maxima(finput)$
Lx: lmp_data['xhi] - lmp_data['xlo]$
Ly: lmp_data['yhi] - lmp_data['ylo]$
ncut: 3.0$
cutoff: 1.2/30.0 * ncut$
/* rescale kernel */

/* w: wendland(ndim, 3)$ */
wexpr: w(abs('r/cutoff))$
wr: lambda([r], ''wexpr)$
w:  normkern(wr, ndim, cutoff)$

vabs(R):= sqrt(R.R);
dR(A, B):= block([del, dmin, d, dV],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: A - (B+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );
nselect: 50;
getcell():= block([i, j, cell_lst], 
  cell_lst: makelist([], i, 1, nselect),
  for i: 1 thru nselect do (
    print(i),
     for j: 1 thru npart do block([
      rr: vabs(dR(r[i], r[j]))],
      if rr<cutoff then cell_lst[i]: cons(j, cell_lst[i])
      )
    ),
  cell_lst);

npart: lmp_data['natoms];
sdpd_mass: 1.0*(1.2/30.0)^2;
r: transpose(matrix(atom_data['x], atom_data['y]))$
cellfile: sconcat(finput, ".cell.n", ncut);
if emptyp(errcatch(load(cellfile))) then
  (cell_lst: getcell(),
    save(cellfile, cell_lst));

m: makelist(sdpd_mass, i, 1, npart)$
rho: makelist(
  block([],
    if mod(i, 100)=0 then print("calculating rho: ", i),
    m[i]*lsum(block(
        [dist: vabs(dR(r[i], r[j]))],
        w(dist)),
      j, cell_lst[i])),
    i, 1, nselect
  )$
float([apply('min, rho)/apply('max, rho)]);
