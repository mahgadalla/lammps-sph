/*

Improving convergence in smoothed particle hydrodynamics simulations
without pairing instability, arXiv:1204.2471v2 [astro-ph.IM]

*/

kill(all);
reset();
load("pw.mac");
wkernel(ndim, ktype, w, dw):= block([expr, C],
  local(plusfun),
  plusfun(x)::= (signum(x) + 1)/2 * x,
  if ktype='cubic then (
    C[1]: 8/3,
    C[2]: 80/(7*%pi),
    C[3]: 16/%pi,
    expr: plusfun(1-abs(r))^3 - 4*plusfun(1/2-abs(r))^3
    )
  else if ktype='quartic then (
    C[1]: 5^5/768,
    C[2]: 5^6*3/(2398*%pi),
    C[3]: 5^6/(512*%pi),
    expr: plusfun(1-abs(r))^4 - 5*plusfun(3/5-abs(r))^4 + 10*plusfun(1/5-abs(r))^4
    )
  else if ktype='quintic then (
    C[1]: 3^5/40,
    C[2]: 3^7*7/(478*%pi),
    C[3]: 3^7/(40*%pi),
    expr: plusfun(1-abs(r))^5 - 6*plusfun(2/3-abs(r))^5 + 15*plusfun(1/3-abs(r))^5
    )
  else if ktype='wendland2 then (
    C[1]: 5/4,
    C[2]: 7/%pi,
    C[3]: 21/(2*%pi),
    expr: if ndim=2 or ndim=3 then plusfun(1-r)^4*(1+4*r) else plusfun(1-r)^3*(1+3*r)
    )
  else if ktype='m4prime then (
    C[1]: 1,
    C[2]: 80/(7*%pi),
    C[3]: 16/%pi,
    expr: (1-2*r)*(2-2*r)^2*between(2*r,1,2,open)/2
         +(12*r^3-10*r^2+1)*between(2*r,0,1,open)
    )
  else if ktype='laguerre_gaussian then (
    C[1]: 1.2,
    C[2]: 8.619364207093854,  /* 27/%pi */
    C[3]: 39.90874017042539, /* 216/%pi^(3/2) */
    expr: (1 - 3^2*r^2 + 3^4*r^4/6)*exp(-3^2*r^2)
    )
  else (
    throw('unknown_kernel_type)
    ),
  define(funmake(w, [r]), C[ndim]*expr),
  define(funmake(dw, [r]), C[ndim]*diff(expr, r))
  );

ndim: 2;
wkernel(ndim, 'laguerre_gaussian, 'w, 'dw);
wkernel(ndim, 'quintic, 'ww, 'dww);
wkernel(ndim, 'wendland2, 'ww2, 'dw2);

intfun(ndim, f)::= buildq([ndim, f],
  if ndim=1 then 2*f else if ndim=2 then 2*%pi*f*r else if ndim=3 then 4*%pi*f*r^2);

I: 1/pwint( intfun(ndim, w(r)), r, 0, +inf);
float(I);
plot2d([w(r)*r^2, ww(r)*r^2, ww2(r)*r^2], [r, 0, 1.4]);

H: 1.0;
sigma: pwint( intfun(ndim, w(r)*r^2)/ndim, r, 0, +inf);
h: 2*sqrt(abs(sigma));
if h=0 then h: 1;


ft(k):= ''(fullratsimp(4*%pi/k*pwint(sin(k*r)*w(r)*r, r, 0, 1.4)))$
ftexp(k):= realpart(expand(float(ft(k))));
translate(ft);
translate(ftexp);
translate(w);

/*
plot2d([['parametric, h*t, lambda([el], aux: ftexp(el), if aux>0 then aux else 1e-7)],
  ['parametric, h*t, lambda([el], aux: ftexp(el), if aux<0 then -aux else 1e-7)]],
  [t, 0.1, 20*%pi], [nticks, 100], [logy], [y, 1e-6, 10],
  [gnuplot_term, eps], [gnuplot_out_file, "f1.4.eps"], [legend, "", "fourier transform"]);

gnuplot_close();
*/
