define_variable(ncut, 6.0, float)$
define_variable(ktype, wendland6, any)$
define_variable(finput, "c4.20-temp0.00-gamma1.00-eta1.00-background0.00-nx30-n3.00-ktypewendland6-grid0-beta/dump00013600.dat", any)$
nx             : 30*ncut/3.0;
dx             : 1.2/nx;
ndim           : 2;

print("processing: ", finput);

load("dump2maxima.mac");
[lmp_data, atom_data]: dump2maxima(finput)$
Lx: lmp_data['xhi] - lmp_data['xlo]$
Ly: lmp_data['yhi] - lmp_data['ylo]$

/* expression to estimate deriviative: diff(expr, x) */
define_variable(expr,  sin(2*%pi*x/Lx), any)$

/* the number of points to sample, 0 means use all points in the dump
file */
define_variable(np, 20, integer)$

load("sph-kernel.mac");
wxy(x, y):= block([r: sqrt(x^2+y^2)], w(r));
dwxy(x, y):= block([r: sqrt(x^2+y^2)], dw(r) * x/r);

A(x, y):= ''expr;
load("nint.mac");
F(x0, y0):=quad(wxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);
dF(x0, y0):=quad(-dwxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);

dexpr: diff(expr, 'x);
dA(x, y):= ''dexpr;

r: transpose(matrix(atom_data['x], atom_data['y]))$

npart: lmp_data['natoms];
vabs(R):= sqrt(R.R);
/* minimal distance between two particles (including effects of periodic boundaries) */
dR(A, B):= block([del, dmin, d, dV],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: A - (B+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );


/* randomly select  np points, if np=0 select all points */
xy_data: transpose(matrix(atom_data['x], atom_data['y], atom_data['v_dAsphx]))$
if np>0 then block([per], 
  per: random_permutation( makelist(i, i, length(xy_data))),
  per: sublist_indices(per, lambda([id], id<=np)),
  xy_data:  map( lambda([id], xy_data[id]), per))$

linspace(a, b, n):= makelist(a+(i-1)*(b-a)/(n-1), i, n)$
logspace(a, b, n):= block([listarith: true], exp(  linspace(log(a), log(b), n)));

load ("descriptive")$
load ("basic")
l1_one(x, y):= abs(x -y);

cutoff_list: float(Lx*logspace(1/1000, 1, 10));
out : [];
for cutoff in cutoff_list do ( 
  define_kernel(2, cutoff, ktype, 'w, 'dw),
  q: 0,
  res: map(lambda([el],
      block([xx: el[1], yy: el[2]],
        q: q + 1,
        print(q, "/", length(xy_data)),
        /* <xx> <yy> <smothed dA>, <exact dA> */
        [xx, yy, dF(xx,yy), dA(xx, yy)])), xy_data),
  l1_list: maplist( 'l1_one, maplist('third, res), maplist('fourth, res)),
  l1_local: float(mean(l1_list)),
  push( [cutoff, l1_local], out));