define_variable(ncut, 3.8, float)$
define_variable(cutoff, 1.2/30.0 * ncut, float)$
define_variable(ndim, 2, integer)$
define_variable(finput, "c10.00-temp0.0001-gamma1.00-eta1.0-background0.00-nx30-n3.80-ktypewendland4-p0.1/dump00283000.dat", any)$
define_variable(ktype, wendland4, any)$


/*
if file dump2maxima.mac is not found run script
lammps-sdpd/tools/maxima/setupt.sh from lammps-sdpd/tools/maxima/
directory
*/

load("dump2maxima.mac");
[lmp_data, atom_data]: dump2maxima(finput)$
Lx: lmp_data['xhi] - lmp_data['xlo]$
Ly: lmp_data['yhi] - lmp_data['ylo]$

/* expression to estimate deriviative: diff(expr, x) */
define_variable(expr,  sin(2*%pi*x/Lx), any)$

/* the number of points to sample, 0 means use all points in the dump
file */
define_variable(np, 40, integer)$

load("sph-kernel.mac");
define_kernel(2, cutoff, ktype, 'w, 'dw);
wxy(x, y):= block([r: sqrt(x^2+y^2)], w(r));
dwxy(x, y):= block([r: sqrt(x^2+y^2)], dw(r) * x/r);

A(x, y):= ''expr;
load("nint.mac");
F(x0, y0):=quad(wxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);
dF(x0, y0):=quad(-dwxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);

dexpr: diff(expr, 'x);
dA(x, y):= ''dexpr;

r: transpose(matrix(atom_data['x], atom_data['y]))$

npart: lmp_data['natoms];
sdpd_mass: 1.0*(1.2/30.0)^2;

vabs(R):= sqrt(R.R);
/* minimal distance between two particles (including effects of periodic boundaries) */
dR(A, B):= block([del, dmin, d, dV],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: A - (B+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );

/* create cell lists */
nselect: npart;

getcell():= block([i, j, cell_lst], 
  cell_lst: makelist([], i, 1, nselect),
  for i: 1 thru nselect do (
    if mod(i, 100)=0 then print("creating a cell list: ", i, "/", nselect),
     for j: 1 thru npart do block([
      rr: vabs(dR(r[i], r[j]))],
      if rr<cutoff then cell_lst[i]: cons(j, cell_lst[i])
      )
    ),
  cell_lst);

cellfile: sconcat(finput, ".cell.n", ncut);
if emptyp(errcatch(load(cellfile))) then
  (cell_lst: getcell(),
    save(cellfile, cell_lst));

/* get masses */
m: makelist(sdpd_mass, i, 1, npart)$
/* get density using summation formula */
rho: makelist(
  block([],
    if mod(i, 100)=0 then print("calculating rho: ", i),
    m[i]*lsum(block(
        [dist: vabs(dR(r[i], r[j]))],
        w(dist)),
      j, cell_lst[i])),
    i, 1, nselect
  )$
float([apply('min, rho), apply('max, rho)]);

/* randomly select  np points, if np=0 select all points */
xy_data: transpose(matrix(atom_data['x], atom_data['y], atom_data['v_dAsphx], rho))$
if np>0 then block([per], 
  per: random_permutation( makelist(i, i, length(xy_data))),
  per: sublist_indices(per, lambda([id], id<=np)),
  xy_data:  map( lambda([id], xy_data[id]), per))$

q: 0$
res: map(lambda([el],
        block([xx: el[1], yy: el[2], dAsphx: el[3], rho_local: el[4]],
          q: q + 1,
          print(q, "/", length(xy_data)),
          /* <xx> <yy> <smothed dA>, <exact dA> <dA SPH>, <density SPH> */
          [xx, yy, dF(xx,yy), dA(xx, yy), dAsphx, rho_local])), xy_data)$

foutput: printf(false, "~a.n~f.ktype~a.smoothed", finput, ncut, if listp(ktype) then first(ktype) else ktype)$
write_data(float(res), foutput)$
print(foutput)$
