define_variable(ncut, 5.0, float);
define_variable(cutoff, 1.2/30.0 * ncut, float);
define_variable(ndim, 2, integer);
define_variable(finput, "c1.44e+02-ndim2-eta8.0-sdpd_background0.0-nx30-n5.00e+00-ktypelaguerrewendland4/dump00040000.dat", any);
define_variable(ktype, 'laguerrewendland4, any);

/*
if file dump2maxima.mac is not found run script
lammps-sdpd/tools/maxima/setupt.sh from lammps-sdpd/tools/maxima/
directory
*/
load("dump2maxima.mac");
[lmp_data, atom_data]: dump2maxima(finput);
Lx: lmp_data['xhi] - lmp_data['xlo];
Ly: lmp_data['yhi] - lmp_data['ylo];

/* expression to estimate deriviative: diff(expr, x) */
define_variable(expr,  sin(2*%pi*x/Lx), any);

/* the number of points to sample, 0 means use all points in the dump
file */
define_variable(np, 40, integer);

load("sph-kernel.mac");
define_kernel(2, cutoff, ktype, 'w, 'dw);
wxy(x, y):= block([r: sqrt(x^2+y^2)], w(r));
dwxy(x, y):= block([r: sqrt(x^2+y^2)], dw(r) * x/r);

A(x, y):= ''expr;
load("nint.mac");
F(x0, y0):=quad(wxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);
dF(x0, y0):=quad(-dwxy('x-x0, 'y-y0)*A('x, 'y), ['x, x0-cutoff, x0+cutoff], ['y, y0-cutoff, y0+cutoff]);

dexpr: diff(expr, 'x);
dA(x, y):= ''dexpr;

xy_data: transpose(matrix(atom_data['x], atom_data['y], atom_data['v_dAsphx]))$
r: transpose(matrix(atom_data['x], atom_data['y]));

npart: lmp_data['natoms];
m: makelist(1.0, i, 1, npart)$
rho: makelist(
  m[i]*sum(w(vabs(dR(r[i], r[j]))), j, 1, npart), i, 1, npart
  );

vabs(R):= sqrt(R.R);
dR(A, B):= block([del, dmin, d, dV],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: B - (A+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );

/* select randomly np points, if np=0 select all points */
if np>0 then block([per], 
  per: random_permutation( makelist(i, i, length(xy_data))),
  per: sublist_indices(per, lambda([id], id<=np)),
  xy_data:  map( lambda([id], xy_data[id]), per))$

q: 0$
res: map(lambda([el],
        block([xx: el[1], yy: el[2], dAsphx: el[3], d],
          q: q + 1,
          print(q, "/", length(xy_data)),
          [xx, yy, dF(xx, yy), dA(xx, yy), dAsphx])), xy_data)$

foutput: printf(false, "~a.n~f.ktype~a.smoothd", finput, ncut, ktype)$
write_data(float(res), foutput)$
print(foutput);
 
/* 
ysmoth: map(lambda([x], dF(x, 0.0)), x)$
plot2d([[discrete, x, abs(ysmoth-dy)]])$
plot2d([[discrete, x, dy], [discrete, x, ysmoth]])$
*/