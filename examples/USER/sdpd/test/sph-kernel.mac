define_kernel(ndim, cutoff, ktype, w, dw):= block([norm, fsim, dfsim, wexpr, dwexpr],
  if ktype='quintic then (
    load("pw.mac"),
    norm[2]: 63/(478*%pi),
    norm[3]: 9/(40*%pi),
    n:       3,
    fsim: [
    (3 - s)^5 - 6*(2 - s)^5 + 15*(1 - s)^5,
    (3 - s)^5 - 6*(2 - s)^5,
    (3 - s)^5
    ],
    dfsim: diff(fsim, s),
    wexpr: pw([-1,fsim[1],1,fsim[2],2,fsim[3], 3, 0, inf], s),
    dwexpr: pw([-1,dfsim[1],1,dfsim[2],2,dfsim[3], 3, 0, inf], s),
    wvect(g):= subst(s=g, wexpr),
    dwvect(g):= subst(s=g, dwexpr))
  else if ktype='lucy then (
    norm[2]: 1.591549430918954,
    norm[3]: 2.088908628081126,
    n      : 1,
    wexpr: (1+3*s)*(1-s)^3,
    dwexpr: diff(wexpr, s),
    wvect(s):= if s<1 then (1+3*s)*(1-s)^3 else 0,
    dwvect(g):= subst(s=g, dwexpr)
    ),
  define(funmake(w, [R]), norm[ndim]*wvect(n*R/cutoff)/cutoff^ndim),
  define(funmake(dw, [R]), n*norm[ndim]/cutoff*dwvect(n*R/cutoff)/cutoff^ndim));

/*
ndim: 3;
cutoff: 0.1;
define_kernel(ndim, cutoff, 'lucy, 'wl, 'dwl)$
define_kernel(ndim, cutoff, 'quintic, 'wq, 'dwq)$
plot2d([dwl, dwq], [x, 0, cutoff]);

infunq(x):= ''(2^(ndim-1)*%pi*x^(ndim-1)*wq(x));
infunl(x):= ''(2^(ndim-1)*%pi*x^(ndim-1)*wl(x));
quad_qags(infunl, x, 0, cutoff);
*/