/* A maxima file for SPH/SDPD */
load ("vector");
load ("eigen");

/* number of dimensions */
ndim: 3;

/* number of particles */
npart: 3;

/* domain size */
[Lx, Ly, Lz]: 1.000e-3$

/* length of the vector */
vabs(R):= sqrt(R.R);
dR(A, B):= block([del, dmin, d],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly, Lz]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: B - (A+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );

/* smoothing length */
h: 6.5e-5$
cutoff: h$
load ("sph-kernel.mac");
define_kernel(ndim, cutoff, 'wendland6, 'w, 'dwdr);

r: makelist([], i, 1, npart);
v: makelist([], i, 1, npart);

/* mass */
m: makelist(1.7e-7, i, 1, npart);

/* viscosity */
nu: makelist(1.0, i, 1, npart);

/* initial volume of the particles */
V: makelist(1.0, i, 1, npart);

/* sound speed */
c: 0.1$

/* postivion and velocity of the particles */
r[1]: [Lx/2.0, Lx/2.0, Lx/2.0]$
v[1]: [0.0, 0.0, 0.0]$

r[2]: [Lx/2.0+0.5*h, Lx/2.0, Lx/2.0]$
v[2]: [1.0, 0.0, 0.0]$

r[3]: [Lx/2.0, Lx/2.0+0.5*h, Lx/2.0]$
v[3]: [1.0, 0.0, 0.0]$

/* equation of state */
rho_0: 1.0;
p(rho):= c^2*rho$

rho: makelist(
  m[i]*sum(w(vabs(dR(r[i], r[j]))), j, 1, npart), i, 1, npart
  );

/* conservative force */
Fc(i, j):= block([pi, pj, rabs],
  pi: p(rho[i]),
  pj: p(rho[j]),
  rabs: vabs(dR(r[i], r[j])),
  m[j]*m[i] * (pi/rho[i]^2 + pj/rho[j]^2) * dwdr(rabs)) * unitvector(dR(r[i], r[j]))$

/* dissipative force */
Fd(i, j):= block([rabs],
  rabs: vabs(dR(r[i], r[j])),
  m[j]*m[i] * (nu[i]+nu[j]) / (rho[i]*rho[j]) * dwdr(rabs)/rabs * (v[i]-v[j]))$

Fpair(i, j):= Fc(i, j) + Fd(i, j);

F(i):= sum( if i=j then 0 else Fpair(i, j), j, 1, npart);

A: makelist(sin(r[i][1]), i, 1, npart);
  
dAc(i, j):= block([rabs, eij],
  rabs: vabs(dR(r[i], r[j])),
  eij: unitvector(dR(r[i], r[j])),
  m[j]*A[j]/rho[j] * dwdr(rabs) * eij[1] );

dA(i):= sum(if i=j then 0 else dAc(i, j), j, 1, npart);

float(rho);
float(F(1));