/* A maxima file for SPH/SDPD */
load ("vector");
load ("eigen");

/* number of dimensions */
ndim: 3;

/* smoothing length */
nx: 5;
h: 1.0;
cutoff: h;
dx: h/3.0;
Lx: nx*dx;
Ly: nx*dx;
Lz: nx*dx;

/* domain size */


/* length of the vector */
vabs(R):= sqrt(R.R);

dR(A, B):= block([del, dmin, d, dV],
  dmin: +inf,
  for del in map(lambda([idx], idx*[Lx, Ly, Lz]), listify(cartesian_product( {-1, 0, 1}, {-1, 0, 1}, {-1, 0, 1}))) do (
    dV: B - (A+del),
    d: vabs(dV),
    if d<dmin then (dmin: d, dr: dV)
    ),
  dr
  );

/* number of particles */
npart: nx^3;
idx: setify(makelist(0.5*dx + i*dx, i, 0, nx-1))$
r:   listify(cartesian_product(idx, idx, idx))$

/* velocity */
v: makelist([0, 0, 0], i, 1, npart)$
load ("quintic-kernel.mac");

/* mass */
m: makelist(rho_0*dx^3, i, 1, npart)$
/* viscosity */
nu: makelist(1, i, 1, npart)$

/* sound speed */
c: 0.1$

/* equation of state */
rho_0: 1.0;
/* p(rho):= c^2*rho_0/7*( (rho/rho_0)^7 - 1 )$ */
p(rho):= c^2*rho$

rho: makelist(
  m[i]*sum(w(rabs: vabs(dR(r[i], r[j]))), j, 1, npart), i, 1, npart
  );

/* conservative force */
Fc(i, j):= block([pi, pj, rabs],
  pi: p(rho[i]),
  pj: p(rho[j]),
  rabs: vabs(dR(r[i], r[j])),
  - m[j]*m[i] * (pi/rho[i]^2 + pj/rho[j]^2) * dwdr(rabs)) * unitvector(dR(r[i], r[j]))$

/* dissipative force */
Fd(i, j):= block([rabs],
  rabs: vabs(dR(r[i], r[j])),
  m[j]*m[i] * (nu[i]+nu[j]) / (rho[i]*rho[j]) * dwdr(rabs)/rabs * (v[i]-v[j]))$

Fpair(i, j):= Fc(i, j) + Fd(i, j);

F(i):= sum( if i=j then 0 else Fpair(i, j), j, 1, npart);

A: makelist(sin(2*%pi*r[i][1]/Lx), i, 1, npart);

dAc(i, j):= block([rabs, eij],
  rabs: vabs(dR(r[i], r[j])),
  eij: unitvector(dR(r[i], r[j])),
  m[j]*A[j]/rho[j] * dwdr(rabs) * eij[1] );
dA(i):= sum(if i=j then 0 else dAc(i, j), j, 1, npart);

float(rho);
float(F(1));

dAar: makelist(dA(i), i, npart);
xar: makelist(r[i][1], i, npart);

float(dA(1));
